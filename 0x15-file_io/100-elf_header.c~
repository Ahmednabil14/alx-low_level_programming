#include "main.h"
#include <elf.h>
void print_magic(Elf64_Ehdr h);
void print_class(Elf64_Ehdr h);
/**
 * print_magic - function that print magic
 * @h: elf header
 * Return: void
 */
void print_magic(Elf64_Ehdr h)
{
        int i;

        printf("  Magic:   ");
        for ( i = 0 ; i < EI_NIDENT ; i++)
        {
                printf("%02x", h.e_ident[i]);
                if (i == EI_NIDENT - 1)
                {
                        printf("\n");
                }
        }
}
/**
 * print_class - function that print class
 * @h: elf header
 * Return: void
 */
void print_class(Elf64_Ehdr h)
{
        printf("  Class:                             ");
        if (h.e_ident[EI_CLASS] == ELFCLASSNONE)
                printf("none\n");
        if (h.e_ident[EI_CLASS] == ELFCLASS32)
                printf("ELF32\n");
        if (h.e_ident[EI_CLASS] == ELFCLASS64)
                printf("ELF64\n");
}

/**
 * main - program that displays the information contained in the ELF
 * header at the start of an ELF file.
 * @argc: number of arguments
 * @argv: arguments
 * Return: 0 if success
 */
int main(int argc, char *argv[])
{
	int fd, r;
	Elf64_Ehdr head;

	if (argc != 2)
		dprintf(STDERR_FILENO, "%s", "enter elf file\n"), exit(98);
	fd = open(argv[1], O_RDONLY);
	if (fd == -1)
	{
		dprintf(STDERR_FILENO, "%s", "can not open the elf file\n");
		exit(98);
	}
	r = read(fd, &head, sizeof(head));
	if (r == -1 || r != sizeof(head))
	{
		dprintf(STDERR_FILENO, "%s", "can not read the file");
		exit(98);
	}
	if (head.e_ident[0] == 0x7f && head.e_ident[1] == 'E' &&
	    head.e_ident[2] == 'L' && head.e_ident[3] == 'F')
		printf("ELF Header:\n");
	else
		dprintf(STDERR_FILENO, "%s", "not ELF file");
	print_magic(head);
	print_class(head);
	if (close(fd))
		dprintf(STDERR_FILENO, "%s", "error close");
	return (0);
}
